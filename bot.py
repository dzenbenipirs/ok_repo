import os
import time
import re
import requests
import logging
import sys
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# –ß—Ç–µ–Ω–∏–µ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
EMAIL = os.environ.get("OK_EMAIL")
PASSWORD = os.environ.get("OK_PASSWORD")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_USER_ID = os.environ.get("TELEGRAM_USER_ID")  # –í–∞—à chat_id –∏–ª–∏ group id

if not all([EMAIL, PASSWORD, TELEGRAM_TOKEN, TELEGRAM_USER_ID]):
    print("‚ùå –ó–∞–¥–∞–π—Ç–µ OK_EMAIL, OK_PASSWORD, TELEGRAM_BOT_TOKEN –∏ TELEGRAM_USER_ID.")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞: –∫–æ–Ω—Å–æ–ª—å + Telegram
class TelegramHandler(logging.Handler):
    def __init__(self, token, chat_id):
        super().__init__()
        self.api_url = f"https://api.telegram.org/bot{token}/sendMessage"
        self.chat_id = chat_id
    def emit(self, record):
        try:
            requests.post(self.api_url, data={"chat_id": self.chat_id, "text": self.format(record)})
        except:
            pass

logger = logging.getLogger("okru_auth")
logger.setLevel(logging.INFO)
# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
ch = logging.StreamHandler(sys.stdout)
ch.setFormatter(logging.Formatter("%(asctime)s | %(levelname)s | %(message)s"))
logger.addHandler(ch)
# Telegram-–ª–æ–≥–≥–µ—Ä
tg = TelegramHandler(TELEGRAM_TOKEN, TELEGRAM_USER_ID)
tg.setFormatter(logging.Formatter("%(asctime)s | %(levelname)s | %(message)s"))
logger.addHandler(tg)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebDriver
def init_driver():
    opts = uc.ChromeOptions()
    opts.add_argument('--headless=new')
    opts.add_argument('--no-sandbox')
    opts.add_argument('--disable-dev-shm-usage')
    opts.add_argument('--disable-gpu')
    opts.add_argument('--window-size=1920,1080')
    return uc.Chrome(options=opts)

driver = init_driver()
wait = WebDriverWait(driver, 20)

# 1) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ "It's you"
def try_confirm_identity():
    try:
        btn = wait.until(EC.element_to_be_clickable((By.XPATH,
            "//input[@value='Yes, confirm'] | //button[contains(text(),'Yes, confirm')] | //button[contains(text(),'–î–∞, —ç—Ç–æ —è')]"
        )))
        btn.click()
        logger.info("üîì 'It's you' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
        time.sleep(1)
    except Exception:
        logger.info("‚ÑπÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ 'It's you' –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∞.")

# 2) –ü–æ–ª—É—á–µ–Ω–∏–µ SMS-–∫–æ–¥–∞ –∏–∑ Telegram —Å —Ç–∞–π–º–∞—É—Ç–æ–º 120s
#    —Ñ–æ—Ä–º–∞—Ç: '#–∫–æ–¥ —Ç–µ–∫—Å—Ç' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç

def retrieve_sms_code(timeout=120, poll_interval=5):
    api_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    last_update = None
    try:
        init = requests.get(api_url, params={'timeout':0}).json()
        if init.get('ok'):
            ids = [u['update_id'] for u in init.get('result', [])]
            last_update = max(ids) + 1 if ids else None
    except:
        last_update = None
    deadline = time.time() + timeout
    logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ SMS-–∫–æ–¥–∞, —Ç–∞–π–º–∞—É—Ç {timeout}s...")
    while time.time() < deadline:
        try:
            resp = requests.get(api_url, params={'timeout':0,'offset': last_update}).json()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
            time.sleep(poll_interval)
            continue
        if not resp.get('ok'):
            time.sleep(poll_interval); continue
        for upd in resp.get('result', []):
            last_update = upd['update_id'] + 1
            msg = upd.get('message') or upd.get('edited_message')
            if not msg or str(msg.get('chat',{}).get('id')) != TELEGRAM_USER_ID:
                continue
            text = msg.get('text','').strip()
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text!r}")
            m = re.match(r"^(?:#–∫–æ–¥\s*)?(.+)$", text, flags=re.IGNORECASE)
            if m:
                code = m.group(1)
                logger.info(f"‚úÖ –ö–æ–¥ –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è SMS: {code}")
                return code
        time.sleep(poll_interval)
    logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è SMS-–∫–æ–¥–∞")
    raise TimeoutException("SMS-–∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω (—Ç–∞–π–º–∞—É—Ç)")

# 3) –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞ –∏–∑ Telegram
#    –∂–¥–µ—Ç '#–ø–æ—Å—Ç –¢–ï–ö–°–¢'

def retrieve_post_text(poll_interval=5):
    api_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    last_update = None
    try:
        init = requests.get(api_url, params={'timeout':0}).json()
        if init.get('ok'):
            ids = [u['update_id'] for u in init.get('result', [])]
            last_update = max(ids) + 1 if ids else None
    except:
        last_update = None
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã '#–ø–æ—Å—Ç <—Ç–µ–∫—Å—Ç>' –≤ Telegram...")
    while True:
        try:
            resp = requests.get(api_url, params={'timeout':0,'offset': last_update}).json()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
            time.sleep(poll_interval)
            continue
        if not resp.get('ok'):
            time.sleep(poll_interval); continue
        for upd in resp.get('result', []):
            last_update = upd['update_id'] + 1
            msg = upd.get('message') or upd.get('edited_message')
            if not msg or str(msg.get('chat',{}).get('id')) != TELEGRAM_USER_ID:
                continue
            text = msg.get('text','').strip()
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text!r}")
            m = re.match(r"^#–ø–æ—Å—Ç\s+(.+)$", text, flags=re.IGNORECASE)
            if m:
                post = m.group(1)
                logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞: {post}")
                return post
        time.sleep(poll_interval)

# 4) –ü–æ—Å—Ç–∏–Ω–≥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (OK.ru Feed)
def post_to_ok(text):
    logger.info("üöÄ –ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
    driver.get("https://ok.ru/feed")
    # –û–∂–∏–¥–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å—Ç–∞
    textarea = wait.until(EC.presence_of_element_located((By.XPATH,
        "//textarea[contains(@class,'posting_field')]"
    )))
    textarea.click()
    textarea.send_keys(text)
    time.sleep(1)
    # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'
    publish = wait.until(EC.element_to_be_clickable((By.XPATH,
        "//button[contains(.,'–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å')]"
    )))
    publish.click()
    logger.info("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")

# –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π
def main():
    try:
        logger.info("üöÄ –û—Ç–∫—Ä—ã–≤–∞—é OK.RU...")
        driver.get("https://ok.ru/")
        # –≤–≤–æ–¥ –∏ –ª–æ–≥–∏–Ω
        wait.until(EC.presence_of_element_located((By.NAME,'st.email'))).send_keys(EMAIL)
        driver.find_element(By.NAME,'st.password').send_keys(PASSWORD)
        driver.find_element(By.XPATH,"//input[@type='submit']").click()
        time.sleep(2)
        try_confirm_identity()
        # SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        code = retrieve_sms_code()
        # —Ä–µ–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –Ω–µ –Ω—É–∂–Ω–æ –∑–¥–µ—Å—å, –ø—Ä–æ–ø—É—Å—Ç–∏–º
        # –î–∞–ª—å—à–µ –∂–¥–µ–º –∫–æ–º–∞–Ω–¥—É #–ø–æ—Å—Ç –∏ –ø—É–±–ª–∏–∫—É–µ–º
        post = retrieve_post_text()
        post_to_ok(post)
        logger.info("üéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
    except Exception as ex:
        logger.error(f"üî• –û—à–∏–±–∫–∞: {ex}")
        sys.exit(1)
    finally:
        driver.quit()
        logger.info("üîí –î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç.")

if __name__ == '__main__':
    main()
