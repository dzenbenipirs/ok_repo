import os
import time
import re
import requests
import logging
import sys
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

# –ß—Ç–µ–Ω–∏–µ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
EMAIL = os.environ.get("OK_EMAIL")
PASSWORD = os.environ.get("OK_PASSWORD")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_USER_ID = os.environ.get("TELEGRAM_USER_ID")  # –í–∞—à chat_id –∏–ª–∏ group id

if not all([EMAIL, PASSWORD, TELEGRAM_TOKEN, TELEGRAM_USER_ID]):
    print("‚ùå –ó–∞–¥–∞–π—Ç–µ OK_EMAIL, OK_PASSWORD, TELEGRAM_BOT_TOKEN –∏ TELEGRAM_USER_ID.")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞: –∫–æ–Ω—Å–æ–ª—å + Telegram
class TelegramHandler(logging.Handler):
    def __init__(self, token, chat_id):
        super().__init__()
        self.api_url = f"https://api.telegram.org/bot{token}/sendMessage"
        self.chat_id = chat_id
    def emit(self, record):
        try:
            requests.post(self.api_url, data={
                "chat_id": self.chat_id,
                "text": self.format(record)
            })
        except:
            pass

logger = logging.getLogger("okru_bot")
logger.setLevel(logging.INFO)
ch = logging.StreamHandler(sys.stdout)
ch.setFormatter(logging.Formatter("%(asctime)s | %(levelname)s | %(message)s"))
logger.addHandler(ch)
tg = TelegramHandler(TELEGRAM_TOKEN, TELEGRAM_USER_ID)
tg.setFormatter(logging.Formatter("%(asctime)s | %(levelname)s | %(message)s"))
logger.addHandler(tg)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebDriver
def init_driver():
    opts = uc.ChromeOptions()
    opts.add_argument('--headless=new')
    opts.add_argument('--no-sandbox')
    opts.add_argument('--disable-dev-shm-usage')
    opts.add_argument('--disable-gpu')
    opts.add_argument('--window-size=1920,1080')
    return uc.Chrome(options=opts)

driver = init_driver()
wait = WebDriverWait(driver, 20)

# 1) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ "It's you"
def try_confirm_identity():
    try:
        btn = wait.until(EC.element_to_be_clickable((By.XPATH,
            "//input[@value='Yes, confirm']"
            " | //button[contains(text(),'Yes, confirm')]"
            " | //button[contains(text(),'–î–∞, —ç—Ç–æ —è')]"
        )))
        btn.click()
        logger.info("üîì 'It's you' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
        driver.save_screenshot("after_confirm_identity.png")
        time.sleep(1)
    except TimeoutException:
        logger.info("‚ÑπÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ 'It's you' –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∞.")

# 2) SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
def retrieve_sms_code(timeout=120, poll_interval=5):
    api = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    last_id = None
    # —Å–±—Ä–æ—Å —Å—Ç–∞—Ä—ã—Ö
    try:
        init = requests.get(api, params={'timeout':0}).json()
        if init.get('ok'):
            ids = [u['update_id'] for u in init['result']]
            last_id = max(ids) + 1 if ids else None
    except:
        pass
    deadline = time.time() + timeout
    logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ SMS-–∫–æ–¥–∞, —Ç–∞–π–º–∞—É—Ç {timeout}s...")
    while time.time() < deadline:
        try:
            resp = requests.get(api, params={'timeout':0, 'offset': last_id}).json()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
            time.sleep(poll_interval)
            continue
        if not resp.get('ok'):
            time.sleep(poll_interval); continue
        for upd in resp['result']:
            last_id = upd['update_id'] + 1
            msg = upd.get('message') or upd.get('edited_message')
            if not msg or str(msg.get('chat',{}).get('id')) != TELEGRAM_USER_ID:
                continue
            text = msg.get('text','').strip()
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ: {text!r}")
            m = re.match(r"^(?:#–∫–æ–¥\s*)?(\d{4,6})$", text, re.IGNORECASE)
            if m:
                code = m.group(1)
                logger.info(f"‚úÖ –ö–æ–¥: {code}")
                return code
        time.sleep(poll_interval)
    raise TimeoutException("SMS-–∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω (—Ç–∞–π–º–∞—É—Ç)")

def try_sms_verification():
    data_l = driver.find_element(By.TAG_NAME,'body').get_attribute('data-l') or ''
    if 'userMain' in data_l and 'anonymMain' not in data_l:
        logger.info("‚úÖ –£–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ø–æ data-l.")
        return
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.")
    driver.save_screenshot("sms_page.png")
    btn = wait.until(EC.element_to_be_clickable((By.XPATH,
        "//input[@type='submit' and @value=\"Get code\"]"
    )))
    btn.click()
    logger.info("üì≤ Get code –Ω–∞–∂–∞—Ç–∞.")
    driver.save_screenshot("sms_requested.png")
    time.sleep(1)
    body = driver.find_element(By.TAG_NAME,'body').text.lower()
    if "you are performing this action too often" in body:
        logger.error("üõë Rate limit.")
        driver.save_screenshot("rate_limit.png")
        sys.exit(1)
    inp = wait.until(EC.presence_of_element_located((By.XPATH,
        "//input[@id='smsCode' or contains(@name,'smsCode')]"
    )))
    driver.save_screenshot("sms_input.png")
    code = retrieve_sms_code()
    inp.clear(); inp.send_keys(code)
    logger.info(f"‚úçÔ∏è –í–≤–µ–¥—ë–Ω –∫–æ–¥ {code}")
    driver.save_screenshot("sms_filled.png")
    next_btn = driver.find_element(By.XPATH,
        "//input[@type='submit' and @value=\"Next\"]"
    )
    next_btn.click()
    logger.info("‚úÖ SMS –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
    driver.save_screenshot("sms_done.png")

# 3) –û–∂–∏–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ #–≥—Ä—É–ø–ø—ã
def retrieve_groups(poll_interval=5):
    api = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    last_id = None
    try:
        init = requests.get(api, params={'timeout':0}).json()
        if init.get('ok'):
            ids = [u['update_id'] for u in init['result']]
            last_id = max(ids)+1 if ids else None
    except:
        pass
    logger.info("‚è≥ –û–∂–∏–¥–∞—é —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: #–≥—Ä—É–ø–ø—ã <urls> ‚Ä¶")
    while True:
        resp = requests.get(api, params={'timeout':0,'offset': last_id}).json()
        if not resp.get('ok'):
            time.sleep(poll_interval); continue
        for upd in resp['result']:
            last_id = upd['update_id'] + 1
            msg = upd.get('message') or upd.get('edited_message')
            if not msg or str(msg.get('chat',{}).get('id')) != TELEGRAM_USER_ID:
                continue
            text = msg.get('text','').strip()
            logger.info(f"üì® Chan: {text!r}")
            m = re.match(r"^#–≥—Ä—É–ø–ø—ã\s+(.+)$", text, re.IGNORECASE)
            if m:
                urls = re.findall(r"https?://ok\.ru/group/\d+/?", m.group(1))
                if urls:
                    logger.info(f"‚úÖ –ì—Ä—É–ø–ø—ã: {urls}")
                    return urls
        time.sleep(poll_interval)

# 4) –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã #–ø–æ—Å—Ç: —Å—Å—ã–ª–∫–∞+—Ç–µ–∫—Å—Ç
def retrieve_post_content(poll_interval=5):
    api = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    last_id = None
    try:
        init = requests.get(api, params={'timeout':0}).json()
        if init.get('ok'):
            ids = [u['update_id'] for u in init['result']]
            last_id = max(ids)+1 if ids else None
    except:
        pass
    logger.info("‚è≥ –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã #–ø–æ—Å—Ç <video_url> <text> ‚Ä¶")
    while True:
        resp = requests.get(api, params={'timeout':0,'offset': last_id}).json()
        if not resp.get('ok'):
            time.sleep(poll_interval); continue
        for upd in resp['result']:
            last_id = upd['update_id'] + 1
            msg = upd.get('message') or upd.get('edited_message')
            if not msg or str(msg.get('chat',{}).get('id')) != TELEGRAM_USER_ID:
                continue
            full = msg.get('text','').strip()
            logger.info(f"üì® Cmd: {full!r}")
            m = re.match(r"^#–ø–æ—Å—Ç\s+(.+)$", full, re.IGNORECASE|re.DOTALL)
            if m:
                content = m.group(1).strip()
                urls = re.findall(r"https?://\S+", content)
                if not urls:
                    logger.error("‚ùå –ù–µ –Ω–∞—à—ë–ª URL –≤–∏–¥–µ–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
                    continue
                video_url = urls[0]
                text = content.replace(video_url, "").strip()
                logger.info(f"‚úÖ –ò–∑–≤–ª–µ–∫–ª–∏ video_url={video_url!r}, text={text!r}")
                return video_url, text
        time.sleep(poll_interval)

# 5) –ü–æ—Å—Ç–∏–Ω–≥: —Å–Ω–∞—á–∞–ª–∞ —Å—Å—ã–ª–∫–∞, –∂–¥—ë–º 5s, –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∂–º—ë–º ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª
def post_to_group(group_url, video_url, text):
    post_url = group_url.rstrip('/') + '/post'
    logger.info(f"üöÄ –û—Ç–∫—Ä—ã–≤–∞—é {post_url}")
    driver.get(post_url)
    box = wait.until(EC.element_to_be_clickable((By.XPATH,
        "//div[@contenteditable='true']"
    )))
    box.click(); box.clear()
    logger.info(f"‚úçÔ∏è –í—Å—Ç–∞–≤–ª—è—é —Å—Å—ã–ª–∫—É: {video_url}")
    box.send_keys(video_url)
    logger.info("‚è≥ –ñ–¥—É 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ‚Ä¶")
    time.sleep(5)
    logger.info(f"‚úçÔ∏è –î–æ–±–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç: {text!r}")
    box.send_keys(" " + text)
    btn = wait.until(EC.element_to_be_clickable((By.XPATH,
        "//button[@data-action='submit' and contains(@class,'js-pf-submit-btn')]"
    )))
    btn.click()
    logger.info(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ {group_url}")
    driver.save_screenshot(f"posted_{group_url.split('/')[-1]}.png")
    time.sleep(1)

# –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π
def main():
    try:
        logger.info("üöÄ –û—Ç–∫—Ä—ã–≤–∞—é OK.RU‚Ä¶")
        driver.get("https://ok.ru/")
        driver.save_screenshot("login.png")

        wait.until(EC.presence_of_element_located((By.NAME,'st.email'))).send_keys(EMAIL)
        driver.find_element(By.NAME,'st.password').send_keys(PASSWORD)
        driver.save_screenshot("cred.png")

        logger.info("üîë –õ–æ–≥–∏–Ω‚Ä¶")
        driver.find_element(By.XPATH,"//input[@type='submit']").click()
        time.sleep(2)
        driver.save_screenshot("after_login.png")

        try_confirm_identity()
        try_sms_verification()
        logger.info("üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        groups = retrieve_groups()
        video_url, post_text = retrieve_post_content()

        for g in groups:
            post_to_group(g, video_url, post_text)

        logger.info("üéâ –í—Å–µ –ø–æ—Å—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"üî• –û—à–∏–±–∫–∞: {e}")
        driver.save_screenshot("fatal.png")
        sys.exit(1)
    finally:
        driver.quit()
        logger.info("üîí –î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç.")

if __name__ == '__main__':
    main()
