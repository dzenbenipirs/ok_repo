import os
import time
import re
import requests
import logging
import sys
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

# –ß—Ç–µ–Ω–∏–µ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
EMAIL = os.environ.get("OK_EMAIL")
PASSWORD = os.environ.get("OK_PASSWORD")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_USER_ID = os.environ.get("TELEGRAM_USER_ID")  # –≤–∞—à chat_id –∏–ª–∏ group id

if not all([EMAIL, PASSWORD, TELEGRAM_TOKEN, TELEGRAM_USER_ID]):
    print("‚ùå –ó–∞–¥–∞–π—Ç–µ OK_EMAIL, OK_PASSWORD, TELEGRAM_BOT_TOKEN –∏ TELEGRAM_USER_ID.")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞: –∫–æ–Ω—Å–æ–ª—å + Telegram
class TelegramHandler(logging.Handler):
    def __init__(self, token, chat_id):
        super().__init__()
        self.api_url = f"https://api.telegram.org/bot{token}/sendMessage"
        self.chat_id = chat_id
    def emit(self, record):
        try:
            requests.post(self.api_url, data={
                "chat_id": self.chat_id,
                "text": self.format(record)
            })
        except:
            pass

logger = logging.getLogger("okru_bot")
logger.setLevel(logging.INFO)
fmt = logging.Formatter("%(asctime)s | %(levelname)s | %(message)s")
ch = logging.StreamHandler(sys.stdout)
ch.setFormatter(fmt)
tg = TelegramHandler(TELEGRAM_TOKEN, TELEGRAM_USER_ID)
tg.setFormatter(fmt)
logger.addHandler(ch)
logger.addHandler(tg)

# WebDriver
def init_driver():
    opts = uc.ChromeOptions()
    opts.add_argument('--headless=new')
    opts.add_argument('--no-sandbox')
    opts.add_argument('--disable-dev-shm-usage')
    opts.add_argument('--disable-gpu')
    opts.add_argument('--window-size=1920,1080')
    return uc.Chrome(options=opts)

driver = init_driver()
wait = WebDriverWait(driver, 20)

# 1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ SMS
def try_confirm_identity():
    try:
        btn = wait.until(EC.element_to_be_clickable((By.XPATH,
            "//input[@value='Yes, confirm']"
            " | //button[contains(text(),'Yes, confirm')]"
            " | //button[contains(text(),'–î–∞, —ç—Ç–æ —è')]"
        )))
        btn.click()
        logger.info("üîì 'It's you' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
        time.sleep(1)
    except:
        logger.info("‚ÑπÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ 'It's you' –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∞.")

def retrieve_sms_code(timeout=120, poll=5):
    api = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    last = None
    # —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—ã–µ
    init = requests.get(api, params={'timeout':0}).json()
    if init.get('ok'):
        ids = [u['update_id'] for u in init['result']]
        last = max(ids)+1 if ids else None

    deadline = time.time()+timeout
    logger.info("‚è≥ –û–∂–∏–¥–∞—é SMS-–∫–æ–¥...")
    while time.time()<deadline:
        resp = requests.get(api, params={'timeout':0,'offset':last}).json()
        if resp.get('ok'):
            for u in resp['result']:
                last = u['update_id']+1
                msg = u.get('message') or {}
                if str(msg.get('chat',{}).get('id'))!=TELEGRAM_USER_ID: continue
                txt = msg.get('text','').strip()
                logger.info(f"üì® SMS-–∫–æ–¥ –ø—Ä–∏—à—ë–ª: {txt!r}")
                m = re.match(r"(\d{4,6})", txt)
                if m:
                    return m.group(1)
        time.sleep(poll)
    raise TimeoutException("SMS-–∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω")

def try_sms_verification():
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º data-l
    dl = driver.find_element(By.TAG_NAME,'body').get_attribute('data-l') or ''
    if 'userMain' in dl and 'anonymMain' not in dl:
        logger.info("‚úÖ –£–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ø–æ data-l.")
        return

    logger.info("üîÑ SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è...")
    driver.save_screenshot("sms_page.png")
    wait.until(EC.element_to_be_clickable((By.XPATH,
        "//input[@type='submit' and @value='Get code']"
    ))).click()
    logger.info("üì≤ Get code –Ω–∞–∂–∞—Ç.")
    time.sleep(1)
    body = driver.find_element(By.TAG_NAME,'body').text.lower()
    if "too often" in body:
        logger.error("üõë Rate limit –Ω–∞ Get code.")
        sys.exit(1)

    inp = wait.until(EC.presence_of_element_located((By.XPATH,
        "//input[@id='smsCode' or contains(@name,'smsCode')]"
    )))
    code = retrieve_sms_code()
    inp.send_keys(code)
    logger.info(f"‚úçÔ∏è –í–≤—ë–ª –∫–æ–¥ {code}")
    driver.find_element(By.XPATH,
        "//input[@type='submit' and @value='Next']"
    ).click()
    logger.info("‚úÖ SMS –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
    time.sleep(1)

# 2) –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
def retrieve_groups():
    api = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    last = None
    init = requests.get(api, params={'timeout':0}).json()
    if init.get('ok'):
        ids = [u['update_id'] for u in init['result']]
        last = max(ids)+1 if ids else None

    logger.info("‚è≥ –û–∂–∏–¥–∞—é #–≥—Ä—É–ø–ø—ã ...")
    while True:
        resp = requests.get(api, params={'timeout':0,'offset':last}).json()
        if resp.get('ok'):
            for u in resp['result']:
                last = u['update_id']+1
                msg = u.get('message') or {}
                if str(msg.get('chat',{}).get('id'))!=TELEGRAM_USER_ID: continue
                txt = msg.get('text','').strip()
                m = re.match(r"#–≥—Ä—É–ø–ø—ã\s+(.+)", txt, re.IGNORECASE)
                if m:
                    urls = re.findall(r"https?://ok\.ru/group/\d+/?", m.group(1))
                    if urls:
                        logger.info(f"‚úÖ –ì—Ä—É–ø–ø—ã: {urls}")
                        return urls
        time.sleep(5)

# 3) –ñ–¥—ë–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª
def retrieve_video_file_id():
    api = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    last = None
    init = requests.get(api, params={'timeout':0}).json()
    if init.get('ok'):
        ids = [u['update_id'] for u in init['result']]
        last = max(ids)+1 if ids else None

    logger.info("‚è≥ –û–∂–∏–¥–∞—é –≤–∏–¥–µ–æ—Ñ–∞–π–ª...")
    while True:
        resp = requests.get(api, params={'timeout':0,'offset':last}).json()
        if resp.get('ok'):
            for u in resp['result']:
                last = u['update_id']+1
                msg = u.get('message') or {}
                if str(msg.get('chat',{}).get('id'))!=TELEGRAM_USER_ID: continue
                if 'video' in msg or 'document' in msg:
                    fid = msg.get('video',{}).get('file_id') or msg.get('document',{}).get('file_id')
                    if fid:
                        logger.info(f"‚úÖ File ID: {fid}")
                        return fid
        time.sleep(5)

# 4) –ò–∑ file_id ‚Äî –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞
def get_direct_url(file_id):
    # –ø–æ–ª—É—á–∞–µ–º file_path
    res = requests.get(
        f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getFile",
        params={'file_id': file_id}
    ).json()
    path = res['result']['file_path']
    url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{path}"
    logger.info(f"üñáÔ∏è Direct URL: {url}")
    return url

# 5) –ñ–¥—ë–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
def retrieve_post_text():
    api = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    last = None
    init = requests.get(api, params={'timeout':0}).json()
    if init.get('ok'):
        ids = [u['update_id'] for u in init['result']]
        last = max(ids)+1 if ids else None

    logger.info("‚è≥ –û–∂–∏–¥–∞—é #–ø–æ—Å—Ç ...")
    while True:
        resp = requests.get(api, params={'timeout':0,'offset':last}).json()
        if resp.get('ok'):
            for u in resp['result']:
                last = u['update_id']+1
                msg = u.get('message') or {}
                if str(msg.get('chat',{}).get('id'))!=TELEGRAM_USER_ID: continue
                txt = msg.get('text','').strip()
                m = re.match(r"#–ø–æ—Å—Ç\s+(.+)", txt, re.IGNORECASE)
                if m:
                    post = m.group(1)
                    logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {post!r}")
                    return post
        time.sleep(5)

# 6) –ü–æ—Å—Ç–∏–Ω–≥
def post_to_group(group_url, text):
    post_url = group_url.rstrip('/') + '/post'
    logger.info(f"üöÄ –û—Ç–∫—Ä—ã–≤–∞—é {post_url}")
    driver.get(post_url)
    box = wait.until(EC.element_to_be_clickable((By.XPATH,
        "//div[@contenteditable='true']"
    )))
    box.click()
    box.clear()
    box.send_keys(text)
    logger.info("‚úçÔ∏è –í–≤—ë–ª —Ç–µ–∫—Å—Ç + —Å—Å—ã–ª–∫—É –≤–∏–¥–µ–æ")
    btn = wait.until(EC.element_to_be_clickable((By.XPATH,
        "//button[@data-action='submit' and contains(@class,'js-pf-submit-btn')]"
    )))
    btn.click()
    logger.info("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
    time.sleep(1)

# –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
def main():
    try:
        # –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        logger.info("üöÄ –û—Ç–∫—Ä—ã–≤–∞—é OK.RU...")
        driver.get("https://ok.ru/")
        wait.until(EC.presence_of_element_located((By.NAME,'st.email'))).send_keys(EMAIL)
        driver.find_element(By.NAME,'st.password').send_keys(PASSWORD)
        logger.info("üîë –õ–æ–≥–∏–Ω...")
        driver.find_element(By.XPATH,"//input[@type='submit']").click()
        time.sleep(2)
        try_confirm_identity()
        try_sms_verification()
        logger.info("üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        # —ç—Ç–∞–ø—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
        groups    = retrieve_groups()
        file_id   = retrieve_video_file_id()
        video_url = get_direct_url(file_id)
        post_txt  = retrieve_post_text()

        full_text = f"{video_url}\n\n{post_txt}"
        for g in groups:
            post_to_group(g, full_text)

        logger.info("üéâ –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"üî• –§–∞—Ç–∞–ª: {e}")
        sys.exit(1)
    finally:
        driver.quit()
        logger.info("üîí –î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç.")

if __name__ == '__main__':
    main()
