import os
import time
import re
import requests
import logging
import sys
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# –ß—Ç–µ–Ω–∏–µ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
EMAIL = os.environ.get("OK_EMAIL")
PASSWORD = os.environ.get("OK_PASSWORD")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.environ.get("TELEGRAM_USER_ID")

if not all([EMAIL, PASSWORD, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID]):
    print("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: OK_EMAIL, OK_PASSWORD, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID.")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
class TelegramHandler(logging.Handler):
    def __init__(self, token, chat_id):
        super().__init__()
        self.api_url = f"https://api.telegram.org/bot{token}/sendMessage"
        self.chat_id = chat_id

    def emit(self, record):
        log_entry = self.format(record)
        try:
            requests.post(self.api_url, data={"chat_id": self.chat_id, "text": log_entry})
        except Exception:
            pass

logger = logging.getLogger("okru_auth")
logger.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s | %(levelname)s | %(message)s")

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)
# Telegram-–ª–æ–≥–≥–µ—Ä
tg_handler = TelegramHandler(TELEGRAM_TOKEN, TELEGRAM_CHAT_ID)
tg_handler.setFormatter(formatter)
logger.addHandler(tg_handler)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome\options = uc.ChromeOptions()
options = uc.ChromeOptions()
options.add_argument('--headless=new')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--disable-gpu')
options.add_argument('--window-size=1920,1080')

driver = uc.Chrome(options=options)
wait = WebDriverWait(driver, 20)

def try_confirm_identity():
    try:
        btn = wait.until(EC.element_to_be_clickable((By.XPATH,
            "//input[@value='Yes, confirm'] | //button[contains(text(), 'Yes, confirm')] | //button[contains(., '–î–∞, —ç—Ç–æ —è')]"
        )))
        btn.click()
        logger.info("üîì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 'It‚Äôs you' –ø—Ä–æ–π–¥–µ–Ω–æ.")
        driver.save_screenshot("after_confirm_identity.png")
        time.sleep(2)
    except TimeoutException:
        logger.info("‚ÑπÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ 'It‚Äôs you' –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∞.")


def retrieve_sms_code(timeout=120, poll_interval=5):
    api_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    deadline = time.time() + timeout
    last_update = None
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ SMS-–∫–æ–¥–∞ –≤ Telegram...")

    while time.time() < deadline:
        try:
            resp = requests.get(api_url, params={'timeout': 0, 'offset': last_update}).json()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Telegram: {e}")
            time.sleep(poll_interval)
            continue
        if not resp.get('ok'):
            time.sleep(poll_interval)
            continue
        for upd in resp.get('result', []):
            last_update = upd['update_id'] + 1
            msg = upd.get('message') or upd.get('edited_message')
            if not msg or str(msg['chat']['id']) != TELEGRAM_CHAT_ID:
                continue
            text = msg.get('text', '')
            m = re.search(r"(\d{4,6})", text)
            if m:
                code = m.group(1)
                logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –∫–æ–¥: {code}")
                return code
        time.sleep(poll_interval)
    raise TimeoutException("–ù–µ –ø–æ–ª—É—á–∏–ª–∏ SMS-–∫–æ–¥ –≤ Telegram")


def try_sms_verification():
    try:
        # –∂–¥–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        wait.until(EC.presence_of_element_located((By.XPATH,
            "//h2[contains(normalize-space(.), 'Get verification code')]"
        )))
        # –Ω–∞—Ö–æ–¥–∏–º –∏ –∫–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–æ—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º 'Get code'
        get_code_btn = wait.until(EC.element_to_be_clickable((By.XPATH,
            "//*[self::button or self::a or self::div][normalize-space(text())='Get code']"
        )))
        get_code_btn.click()
        logger.info("üì≤ –ó–∞–ø—Ä–æ—à–µ–Ω SMS-–∫–æ–¥ (Get code)")
        driver.save_screenshot("sms_requested.png")

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
        logger.info("üì≤ –ñ–¥—É SMS-–∫–æ–¥. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É –≤ Telegram.")
        inp = wait.until(EC.presence_of_element_located((By.XPATH,
            "//input[@name='otp'] | //input[contains(@placeholder,'–∫–æ–¥')]"
        )))
        driver.save_screenshot("sms_input_field.png")

        # –≤–≤–æ–¥ –∫–æ–¥–∞
        code = retrieve_sms_code()
        inp.send_keys(code)
        driver.save_screenshot("sms_code_entered.png")

        # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞
        ok_btn = wait.until(EC.element_to_be_clickable((By.XPATH,
            "//button[normalize-space(text())='Submit'] | //button[normalize-space(text())='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å']"
        )))
        ok_btn.click()
        logger.info("‚úÖ SMS-–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
        driver.save_screenshot("sms_confirmed.png")
    except TimeoutException:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É Get code –∏–ª–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π
try:
    logger.info("–û—Ç–∫—Ä—ã–≤–∞–µ–º OK.RU...")
    driver.get("https://ok.ru/")
    driver.save_screenshot("login_page.png")

    wait.until(EC.presence_of_element_located((By.NAME, 'st.email'))).send_keys(EMAIL)
    driver.find_element(By.NAME, 'st.password').send_keys(PASSWORD)
    driver.save_screenshot("credentials_entered.png")

    logger.info("–í–≤–æ–¥–∏–º –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏ –Ω–∞–∂–∏–º–∞–µ–º –í–æ–π—Ç–∏...")
    driver.find_element(By.XPATH, "//input[@type='submit']").click()

    time.sleep(2)
    driver.save_screenshot("after_login_submit.png")

    try_confirm_identity()
    try_sms_verification()
    logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
except Exception as ex:
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {ex}")
    driver.save_screenshot("fatal_error.png")
finally:
    driver.quit()
    logger.info("–î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç.")
