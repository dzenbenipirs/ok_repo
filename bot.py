import os
import time
import re
import requests
import logging
import sys
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# –ß—Ç–µ–Ω–∏–µ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
EMAIL = os.environ.get("OK_EMAIL")
PASSWORD = os.environ.get("OK_PASSWORD")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.environ.get("TELEGRAM_USER_ID")

if not all([EMAIL, PASSWORD, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID]):
    print("‚ùå –ó–∞–¥–∞–π—Ç–µ OK_EMAIL, OK_PASSWORD, TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID.")
    sys.exit(1)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram ---
class TelegramHandler(logging.Handler):
    def __init__(self, token, chat_id):
        super().__init__()
        self.api_url = f"https://api.telegram.org/bot{token}/sendMessage"
        self.chat_id = chat_id

    def emit(self, record):
        payload = {"chat_id": self.chat_id, "text": self.format(record)}
        try:
            requests.post(self.api_url, data=payload)
        except Exception:
            pass

logger = logging.getLogger("okru_auth")
logger.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s | %(levelname)s | %(message)s")

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
ch = logging.StreamHandler(sys.stdout)
ch.setFormatter(formatter)
logger.addHandler(ch)
# Telegram-–ª–æ–≥–≥–µ—Ä
tg = TelegramHandler(TELEGRAM_TOKEN, TELEGRAM_CHAT_ID)
tg.setFormatter(formatter)
logger.addHandler(tg)

# --- WebDriver setup ---
options = uc.ChromeOptions()
options.add_argument('--headless=new')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--disable-gpu')
options.add_argument('--window-size=1920,1080')

driver = uc.Chrome(options=options)
wait = WebDriverWait(driver, 20)

# --- –®–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ¬´It‚Äôs you¬ª ---
def try_confirm_identity():
    try:
        btn = wait.until(EC.element_to_be_clickable((By.XPATH,
            "//input[@value='Yes, confirm'] | //button[contains(text(), 'Yes, confirm')] | //button[contains(text(), '–î–∞, —ç—Ç–æ —è')]"
        )))
        btn.click()
        logger.info("üîì 'It‚Äôs you' –ø—Ä–æ–π–¥–µ–Ω–æ.")
        driver.save_screenshot("after_confirm_identity.png")
        time.sleep(1)
    except TimeoutException:
        logger.info("‚ÑπÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ 'It‚Äôs you' –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∞.")

# --- –û–∂–∏–¥–∞–Ω–∏–µ –∏ –≤–≤–æ–¥ SMS-–∫–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram ---
def retrieve_sms_code(timeout=120, poll_interval=5):
    api_get = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    deadline = time.time() + timeout
    last_update = None
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ SMS-–∫–æ–¥–∞ –≤ Telegram...")

    while time.time() < deadline:
        try:
            resp = requests.get(api_get, params={'timeout':0,'offset':last_update}).json()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
            time.sleep(poll_interval)
            continue
        if not resp.get('ok'):
            time.sleep(poll_interval)
            continue
        for upd in resp.get('result', []):
            last_update = upd['update_id'] + 1
            msg = upd.get('message') or upd.get('edited_message')
            if not msg or str(msg['chat']['id']) != TELEGRAM_CHAT_ID:
                continue
            text = msg.get('text','')
            m = re.search(r"(\d{4,6})", text)
            if m:
                code = m.group(1)
                logger.info(f"üì• –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω: {code}")
                return code
        time.sleep(poll_interval)
    raise TimeoutException("–ù–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω SMS-–∫–æ–¥ –≤ Telegram")

# --- –®–∞–≥ –∑–∞–ø—Ä–æ—Å–∞ SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---
def try_sms_verification():
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        wait.until(EC.presence_of_element_located((By.XPATH,
            "//div[contains(normalize-space(.), 'With it, we can confirm that this is this your profile. For this, we will send a code by free text message to the phone number indicated')]"
        )))
        # –ù–∞–π–¥—ë–º –∫–Ω–æ–ø–∫—É Get code —Å —Ç–æ—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        btn = wait.until(EC.element_to_be_clickable((By.XPATH,
            "//*[self::button or self::a or self::div][normalize-space(text())='Get code']"
        )))
        btn.click()
        logger.info("üì≤ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'Get code'. SMS-–∫–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω.")
        driver.save_screenshot("sms_requested.png")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        logger.info("üì≤ –°–∫—Ä–∏–ø—Ç –æ–∂–∏–¥–∞–µ—Ç SMS-–∫–æ–¥. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É.")

        # –ñ–¥—ë–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        inp = wait.until(EC.presence_of_element_located((By.XPATH,
            "//input[@name='otp'] | //input[contains(@placeholder,'–∫–æ–¥')]"
        )))
        driver.save_screenshot("sms_input_field.png")

        # –ü–æ–ª—É—á–∞–µ–º –∏ –≤–≤–æ–¥–∏–º –∫–æ–¥
        code = retrieve_sms_code()
        inp.send_keys(code)
        driver.save_screenshot("sms_code_entered.png")

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤–≤–æ–¥
        ok = wait.until(EC.element_to_be_clickable((By.XPATH,
            "//button[normalize-space(text())='Submit'] | //button[normalize-space(text())='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å']"
        )))
        ok.click()
        logger.info("‚úÖ SMS-–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
        driver.save_screenshot("sms_confirmed.png")
    except TimeoutException:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ 'Get code' –∏–ª–∏ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
try:
    logger.info("–û—Ç–∫—Ä—ã–≤–∞–µ–º https://ok.ru...")
    driver.get("https://ok.ru/")
    driver.save_screenshot("login_page.png")

    # –í–≤–æ–¥–∏–º —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    wait.until(EC.presence_of_element_located((By.NAME,'st.email'))).send_keys(EMAIL)
    driver.find_element(By.NAME,'st.password').send_keys(PASSWORD)
    driver.save_screenshot("credentials_entered.png")

    logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞...")
    driver.find_element(By.XPATH,"//input[@type='submit']").click()
    time.sleep(2)
    driver.save_screenshot("after_login_submit.png")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç—å –∏ SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    try_confirm_identity()
    try_sms_verification()

    logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
except Exception as ex:
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {ex}")
    driver.save_screenshot("fatal_error.png")
finally:
    driver.quit()
    logger.info("–î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç.")
