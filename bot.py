import csv
import os
import time
import requests
import logging
import sys
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=[
        logging.FileHandler("bot.log", mode='w'),
        logging.StreamHandler(sys.stdout)
    ]
)
log = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
EMAIL = os.environ.get("OK_EMAIL")
PASSWORD = os.environ.get("OK_PASSWORD")

if not EMAIL or not PASSWORD:
    log.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è OK_EMAIL –∏ OK_PASSWORD –Ω–µ –∑–∞–¥–∞–Ω—ã.")
    sys.exit(1)

log.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
log.info(f"EMAIL –Ω–∞–π–¥–µ–Ω: {EMAIL[:3]}***")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
options = uc.ChromeOptions()
# –û—Å—Ç–∞–≤–ª—è–µ–º headless –¥–ª—è CI, –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
options.add_argument('--headless=new')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--disable-gpu')
options.add_argument('--window-size=1920,1080')
options.add_argument('--start-maximized')
options.add_argument('--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36')

log.info("–°–æ–∑–¥–∞—ë–º undetected_chromedriver...")
driver = uc.Chrome(options=options)
wait = WebDriverWait(driver, 20)

def download_video(url, filename):
    try:
        log.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ: {url}")
        r = requests.get(url, stream=True)
        with open(filename, 'wb') as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)
        log.info("‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {e}")
        raise

try:
    # –í—Ö–æ–¥ –≤ OK.RU
    log.info("–û—Ç–∫—Ä—ã–≤–∞–µ–º OK.RU...")
    driver.get("https://ok.ru/")
    wait.until(EC.presence_of_element_located((By.NAME, "st.email"))).send_keys(EMAIL)
    driver.find_element(By.NAME, "st.password").send_keys(PASSWORD)

    # –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –Ω–∞—Å—Ç–æ—è—â—É—é –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ login-form-actions
    log.info("–ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...")
    login_btn = wait.until(EC.element_to_be_clickable(
        (By.XPATH, "//div[contains(@class, 'login-form-actions')]//input[@type='submit']")
    ))
    login_btn.click()

    time.sleep(2)
    driver.save_screenshot("after_login_submit.png")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
    try:
        wait.until(EC.presence_of_element_located((By.ID, "hook_Block_TopUserMenu")))
        log.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
    except TimeoutException:
        log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏–ª–∏ –∫–∞–ø—á–∞.")
        driver.save_screenshot("login_failed.png")
        sys.exit(1)

    # –ß—Ç–µ–Ω–∏–µ CSV –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
    with open("posts.csv", newline='', encoding="utf-8") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            group_post_url = row['group_post_url']
            video_url = row['video_url']
            description = row['description']
            video_file = "video_temp.mp4"

            log.info(f"--- –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –≥—Ä—É–ø–ø—É: {group_post_url} ---")
            try:
                download_video(video_url, video_file)
            except Exception:
                continue

            driver.get(group_post_url)
            log.info(f"–ü–µ—Ä–µ—à–ª–∏ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {group_post_url}")
            time.sleep(5)

            try:
                video_input = wait.until(EC.presence_of_element_located((By.XPATH, "//input[@type='file']")))
                video_input.send_keys(os.path.abspath(video_file))
                log.info("üéûÔ∏è –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
                time.sleep(10)

                desc_field = driver.find_element(By.XPATH, "//textarea")
                desc_field.send_keys(description)
                time.sleep(1)

                publish_button = driver.find_element(By.XPATH, "//button[contains(., '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å')]")
                publish_button.click()
                log.info("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")

            except Exception as e:
                log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                driver.save_screenshot("post_error.png")

            finally:
                if os.path.exists(video_file):
                    os.remove(video_file)
                    log.info("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω.")
                time.sleep(5)

except Exception as e:
    log.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")
    driver.save_screenshot("fatal_error.png")

finally:
    driver.quit()
    log.info("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
