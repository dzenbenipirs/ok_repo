import csv
import os
import time
import requests
import logging
import sys
import threading
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

from telegram import Bot, Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# –õ–æ–≥–≥–µ—Ä
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=[logging.FileHandler("bot.log", mode='w'), logging.StreamHandler(sys.stdout)]
)
log = logging.getLogger(__name__)

EMAIL = os.environ.get("OK_EMAIL")
PASSWORD = os.environ.get("OK_PASSWORD")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_USER_ID = os.environ.get("TELEGRAM_USER_ID")  # –í –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏

if not all([EMAIL, PASSWORD, TELEGRAM_TOKEN, TELEGRAM_USER_ID]):
    log.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
options = uc.ChromeOptions()
options.add_argument('--headless=new')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--disable-gpu')
options.add_argument('--window-size=1920,1080')
options.add_argument('--start-maximized')
options.add_argument('--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36')

driver = uc.Chrome(options=options)
wait = WebDriverWait(driver, 20)

# Telegram auth sync
sms_code_received = threading.Event()
sms_code_value = None

def start(update: Update, context: CallbackContext):
    update.message.reply_text("üëã –ñ–¥—É –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞.")

def handle_code(update: Update, context: CallbackContext):
    global sms_code_value
    if str(update.effective_user.id) != TELEGRAM_USER_ID:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    sms_code_value = update.message.text.strip()
    sms_code_received.set()
    update.message.reply_text("‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç.")

def run_telegram_bot():
    updater = Updater(TELEGRAM_TOKEN)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_code))
    updater.start_polling()

def download_video(url, filename):
    try:
        log.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ: {url}")
        r = requests.get(url, stream=True)
        with open(filename, 'wb') as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)
        log.info("‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {e}")
        raise

def try_confirm_identity():
    try:
        confirm_btn = wait.until(EC.element_to_be_clickable(
            (By.XPATH, "//input[@value='Yes, confirm'] | //button[contains(text(), 'Yes, confirm')]")
        ))
        confirm_btn.click()
        log.info("üîì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 'It‚Äôs you' –ø—Ä–æ–π–¥–µ–Ω–æ.")
        time.sleep(2)
        driver.save_screenshot("after_confirm_identity.png")
    except TimeoutException:
        log.info("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 'It‚Äôs you' –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å.")

def wait_for_sms_code():
    try:
        code_button = wait.until(EC.element_to_be_clickable(
            (By.XPATH, "//button[contains(., 'Get code') or contains(., 'Send code')]")
        ))
        code_button.click()
        log.info("üì≤ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞.")
        driver.save_screenshot("code_requested.png")
    except TimeoutException:
        log.warning("üö´ –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ 'Get code'.")

    log.info("‚è≥ –û–∂–∏–¥–∞–µ–º –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram...")
    sms_code_received.wait(timeout=300)
    if not sms_code_value:
        log.error("‚ùå –ö–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è.")
        sys.exit(1)

    try:
        code_input = wait.until(EC.presence_of_element_located((By.XPATH, "//input[@type='tel']")))
        code_input.send_keys(sms_code_value)
        submit_btn = wait.until(EC.element_to_be_clickable(
            (By.XPATH, "//button[contains(., 'Continue') or contains(., 'Submit')]")
        ))
        submit_btn.click()
        log.info("‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
        driver.save_screenshot("code_entered.png")
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞: {e}")
        driver.save_screenshot("code_error.png")
        sys.exit(1)

# –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
telegram_thread = threading.Thread(target=run_telegram_bot, daemon=True)
telegram_thread.start()

try:
    log.info("–û—Ç–∫—Ä—ã–≤–∞–µ–º OK.RU...")
    driver.get("https://ok.ru/")
    wait.until(EC.presence_of_element_located((By.NAME, "st.email"))).send_keys(EMAIL)
    driver.find_element(By.NAME, "st.password").send_keys(PASSWORD)

    log.info("–ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...")
    login_btn = wait.until(EC.element_to_be_clickable(
        (By.XPATH, "//div[contains(@class, 'login-form-actions')]//input[@type='submit']")))
    login_btn.click()

    time.sleep(2)
    driver.save_screenshot("after_login_submit.png")

    try_confirm_identity()
    wait_for_sms_code()

    test_post_url = "https://ok.ru/group/70000033095519/post"
    log.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥: {test_post_url}")
    driver.get(test_post_url)
    time.sleep(5)

    body_class = driver.find_element(By.TAG_NAME, "body").get_attribute("class")
    log.info(f"–ö–ª–∞—Å—Å <body>: {body_class}")

    if "anonym" in body_class:
        log.error("‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. OK.ru –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏.")
        driver.save_screenshot("not_logged_in.png")
        sys.exit(1)

    log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –î–æ—Å—Ç—É–ø –∫ –ø–æ—Å—Ç–∏–Ω–≥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")

    with open("posts.csv", newline='', encoding="utf-8") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            group_post_url = row['group_post_url']
            video_url = row['video_url']
            description = row['description']
            video_file = "video_temp.mp4"

            log.info(f"--- –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –≥—Ä—É–ø–ø—É: {group_post_url} ---")
            try:
                download_video(video_url, video_file)
            except Exception:
                continue

            driver.get(group_post_url)
            log.info(f"–ü–µ—Ä–µ—à–ª–∏ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {group_post_url}")
            time.sleep(5)

            try:
                video_input = wait.until(EC.presence_of_element_located((By.XPATH, "//input[@type='file']")))
                video_input.send_keys(os.path.abspath(video_file))
                log.info("üéûÔ∏è –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
                time.sleep(10)

                desc_field = driver.find_element(By.XPATH, "//textarea")
                desc_field.send_keys(description)
                time.sleep(1)

                publish_button = driver.find_element(By.XPATH, "//button[contains(., '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å')]")
                publish_button.click()
                log.info("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")

            except Exception as e:
                log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                driver.save_screenshot("post_error.png")

            finally:
                if os.path.exists(video_file):
                    os.remove(video_file)
                    log.info("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω.")
                time.sleep(5)

except Exception as e:
    log.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")
    driver.save_screenshot("fatal_error.png")

finally:
    driver.quit()
    log.info("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
