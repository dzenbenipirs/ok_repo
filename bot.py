import csv
import os
import time
import re
import requests
import logging
import sys
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=[
        logging.FileHandler("bot.log", mode='w'),
        logging.StreamHandler(sys.stdout)
    ]
)
log = logging.getLogger(__name__)

# –ß—Ç–µ–Ω–∏–µ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
EMAIL = os.environ.get("OK_EMAIL")
PASSWORD = os.environ.get("OK_PASSWORD")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.environ.get("TELEGRAM_USER_ID")

if not EMAIL or not PASSWORD:
    log.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è OK_EMAIL –∏ OK_PASSWORD –Ω–µ –∑–∞–¥–∞–Ω—ã.")
    sys.exit(1)

if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
    log.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã.")
    sys.exit(1)

log.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ü–∏–π Chrome
options = uc.ChromeOptions()
options.add_argument('--headless=new')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--disable-gpu')
options.add_argument('--window-size=1920,1080')
options.add_argument(f"--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36")

driver = uc.Chrome(options=options)
wait = WebDriverWait(driver, 20)


def download_video(url, filename):
    try:
        log.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ: {url}")
        r = requests.get(url, stream=True)
        with open(filename, 'wb') as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)
        log.info("‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {e}")
        raise


def try_confirm_identity():
    try:
        confirm_btn = wait.until(EC.element_to_be_clickable(
            (By.XPATH,
             "//input[@value='Yes, confirm']"
             "|//button[contains(., 'Yes, confirm')]"
             "|//button[contains(., '–î–∞, —ç—Ç–æ —è')]"
            )
        ))
        confirm_btn.click()
        log.info("üîì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 'It‚Äôs you' –ø—Ä–æ–π–¥–µ–Ω–æ.")
        time.sleep(2)
        driver.save_screenshot("after_confirm_identity.png")
    except TimeoutException:
        log.info("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 'It‚Äôs you' –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å.")


def retrieve_sms_code_via_telegram(timeout=120, poll_interval=5):
    api_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    deadline = time.time() + timeout
    last_update_id = None
    log.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –≤ Telegram...")

    while time.time() < deadline:
        try:
            resp = requests.get(api_url, params={'timeout': 0, 'offset': last_update_id}).json()
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Telegram API: {e}")
            time.sleep(poll_interval)
            continue

        if not resp.get('ok'):
            log.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç Telegram API: {resp}")
            time.sleep(poll_interval)
            continue

        for upd in resp.get('result', []):
            last_update_id = upd['update_id'] + 1
            msg = upd.get('message') or upd.get('edited_message')
            if not msg or str(msg['chat']['id']) != TELEGRAM_CHAT_ID:
                continue

            text = msg.get('text', '')
            match = re.search(r"(\d{4,6})", text)
            if match:
                code = match.group(1)
                log.info(f"üì• –ü—Ä–∏–Ω—è—Ç –∫–æ–¥ –∏–∑ Telegram: {code}")
                return code

        time.sleep(poll_interval)

    log.error("‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–¥ –≤ Telegram –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")
    raise TimeoutException("SMS –∫–æ–¥ –Ω–µ –ø—Ä–∏—à—ë–ª –≤ Telegram")


def try_sms_verification():
    try:
        # –∂–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ SMS
        sms_button = wait.until(EC.presence_of_element_located(
            (By.XPATH,
             "//button[contains(., 'Get code')]"
             "|//input[@value='Get code']"
             "|//button[contains(., '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥')]"
             "|//input[@value='–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥']"
            )
        ))
        driver.save_screenshot("sms_verification_page.png")

        get_code_btn = wait.until(EC.element_to_be_clickable(
            (By.XPATH,
             "//button[contains(., 'Get code')]"
             "|//input[@value='Get code']"
             "|//button[contains(., '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥')]"
             "|//input[@value='–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥']"
            )
        ))
        get_code_btn.click()
        log.info("üì≤ –ó–∞–ø—Ä–æ—à–µ–Ω SMS-–∫–æ–¥ (–∫–Ω–æ–ø–∫–∞ Get code/–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥)")

        # –∂–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        code_input = wait.until(EC.presence_of_element_located(
            (By.XPATH,
             "//input[@name='otp']"
             "|//input[@type='text' and (contains(@placeholder, '–∫–æ–¥') or contains(@placeholder, 'OTP'))]"
            )
        ))

        sms_code = retrieve_sms_code_via_telegram()
        code_input.send_keys(sms_code)

        submit_btn = driver.find_element(
            By.XPATH,
            "//button[contains(., 'Submit')]"
            "|//button[contains(., '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')]"
        )
        submit_btn.click()
        log.info("‚úÖ SMS-–∫–æ–¥ –≤–≤–µ–¥—ë–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
        time.sleep(2)
    except TimeoutException:
        log.info("‚ÑπÔ∏è SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–∞—Å—å –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except NoSuchElementException:
        log.info("‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.")


# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫
try:
    log.info("–û—Ç–∫—Ä—ã–≤–∞–µ–º OK.RU...")
    driver.get("https://ok.ru/")
    wait.until(EC.presence_of_element_located((By.NAME, "st.email"))).send_keys(EMAIL)
    driver.find_element(By.NAME, "st.password").send_keys(PASSWORD)

    log.info("–ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...")
    login_btn = wait.until(EC.element_to_be_clickable(
        (By.XPATH, "//div[contains(@class, 'login-form-actions')]//input[@type='submit']")
    ))
    login_btn.click()

    time.sleep(2)
    driver.save_screenshot("after_login_submit.png")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã "It's you"
    try_confirm_identity()
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
    try_sms_verification()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –∫ –ø–æ—Å—Ç–∏–Ω–≥—É
    test_post_url = "https://ok.ru/group/70000033095519/post"
    log.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥: {test_post_url}")
    driver.get(test_post_url)
    time.sleep(5)

    body_class = driver.find_element(By.TAG_NAME, "body").get_attribute("class")
    log.info(f"–ö–ª–∞—Å—Å <body>: {body_class}")

    if "anonym" in body_class:
        log.error("‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. OK.ru –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏.")
        driver.save_screenshot("not_logged_in.png")
        sys.exit(1)

    log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –î–æ—Å—Ç—É–ø –∫ –ø–æ—Å—Ç–∏–Ω–≥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ CSV
    with open("posts.csv", newline='', encoding="utf-8") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            group_post_url = row['group_post_url']
            video_url = row['video_url']
            description = row['description']
            video_file = "video_temp.mp4"

            log.info(f"--- –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –≥—Ä—É–ø–ø—É: {group_post_url} ---")
            try:
                download_video(video_url, video_file)
            except Exception:
                continue

            driver.get(group_post_url)
            log.info(f"–ü–µ—Ä–µ—à–ª–∏ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {group_post_url}")
            time.sleep(5)

            try:
                video_input = wait.until(EC.presence_of_element_located((By.XPATH, "//input[@type='file']")))
                video_input.send_keys(os.path.abspath(video_file))
                log.info("üéûÔ∏è –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
                time.sleep(10)

                desc_field = driver.find_element(By.XPATH, "//textarea")
                desc_field.send_keys(description)
                time.sleep(1)

                publish_button = driver.find_element(By.XPATH, "//button[contains(., '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å')]")
                publish_button.click()
                log.info("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")

            except Exception as e:
                log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                driver.save_screenshot("post_error.png")

            finally:
                if os.path.exists(video_file):
                    os.remove(video_file)
                    log.info("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω.")
                time.sleep(5)

except Exception as e:
    log.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")
    driver.save_screenshot("fatal_error.png")

finally:
    driver.quit()
    log.info("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
