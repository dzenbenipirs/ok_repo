import os
import time
import re
import requests
import logging
import sys
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException

# –ß—Ç–µ–Ω–∏–µ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
EMAIL = os.environ.get("OK_EMAIL")
PASSWORD = os.environ.get("OK_PASSWORD")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_USER_ID = os.environ.get("TELEGRAM_USER_ID")

if not all([EMAIL, PASSWORD, TELEGRAM_TOKEN, TELEGRAM_USER_ID]):
    print("‚ùå –ó–∞–¥–∞–π—Ç–µ OK_EMAIL, OK_PASSWORD, TELEGRAM_BOT_TOKEN –∏ TELEGRAM_USER_ID.")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
class TelegramHandler(logging.Handler):
    def __init__(self, token, chat_id):
        super().__init__()
        self.api_url = f"https://api.telegram.org/bot{token}/sendMessage"
        self.chat_id = chat_id

    def emit(self, record):
        payload = {"chat_id": self.chat_id, "text": self.format(record)}
        try:
            requests.post(self.api_url, data=payload)
        except Exception:
            pass

logger = logging.getLogger("okru_auth")
logger.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s | %(levelname)s | %(message)s")
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)
telegram_handler = TelegramHandler(TELEGRAM_TOKEN, TELEGRAM_USER_ID)
telegram_handler.setFormatter(formatter)
logger.addHandler(telegram_handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebDriver
options = uc.ChromeOptions()
options.add_argument('--headless=new')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--disable-gpu')
options.add_argument('--window-size=1920,1080')
driver = uc.Chrome(options=options)
wait = WebDriverWait(driver, 20)

# –®–∞–≥ 1: "It's you"
def try_confirm_identity():
    try:
        btn = wait.until(EC.element_to_be_clickable((By.XPATH,
            "//input[@value='Yes, confirm'] | //button[contains(text(),'Yes, confirm')] | //button[contains(text(),'–î–∞, —ç—Ç–æ —è')]"
        )))
        btn.click()
        logger.info("üîì 'It's you' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
        driver.save_screenshot("after_confirm_identity.png")
        time.sleep(1)
    except Exception:
        logger.info("‚ÑπÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ 'It's you' –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∞.")

# –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
def debug_print_updates():
    api_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    try:
        resp = requests.get(api_url, params={'timeout': 0}).json()
        logger.info(f"üì® –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ: {resp}")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è getUpdates: {e}")

# –®–∞–≥ 3: –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –∏ –æ—Ç–ª–∞–¥–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ Telegram
def try_sms_verification():
    try:
        # 3.1) –ñ–¥—ë–º –∏ –∫–ª–∏–∫–∞–µ–º 'Get code'
        driver.save_screenshot("sms_verification_page.png")
        get_btn = wait.until(EC.element_to_be_clickable((By.XPATH,
            "//input[@type='submit' and @value='Get code']"
        )))
        get_btn.click()
        logger.info("üì≤ 'Get code' –Ω–∞–∂–∞—Ç, SMS –∑–∞–ø—Ä–æ—à–µ–Ω.")
        driver.save_screenshot("sms_requested.png")

        # 3.2) –ñ–¥—ë–º —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        logger.info("üîÑ –û–∂–∏–¥–∞—é —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ SMS-–∫–æ–¥–∞...")
        while True:
            try:
                form = driver.find_element(By.XPATH,
                    "//div[@class='ext-registration_cnt']//form[contains(@action,'AnonymUnblockVerifyPhoneCodeOldPhone')]"
                )
                inp = form.find_element(By.ID, "smsCode")
                if inp.is_displayed():
                    driver.save_screenshot("sms_input_field.png")
                    logger.info("üëÄ –ü–æ–ª–µ –¥–ª—è –∫–æ–¥–∞ –ø–æ—è–≤–∏–ª–æ—Å—å.")
                    break
            except NoSuchElementException:
                pass
            time.sleep(1)

        # 3.3) –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram
        debug_print_updates()

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        logger.info("üõë –ó–∞–≤–µ—Ä—à–∞—é –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π for debugging.")
        driver.quit()
        sys.exit(0)

    except Exception as e:
        logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ SMS –∏–ª–∏ –æ—Ç–ª–∞–¥–∫–µ: {e}")
        driver.quit()
        sys.exit(1)

# –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def main():
    try:
        logger.info("üöÄ –û—Ç–∫—Ä—ã–≤–∞—é OK.RU...")
        driver.get("https://ok.ru/")
        driver.save_screenshot("login_page.png")

        # –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
        wait.until(EC.presence_of_element_located((By.NAME,'st.email'))).send_keys(EMAIL)
        driver.find_element(By.NAME,'st.password').send_keys(PASSWORD)
        driver.save_screenshot("credentials_entered.png")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
        logger.info("üîë –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞...")
        driver.find_element(By.XPATH,"//input[@type='submit']").click()
        time.sleep(2)
        driver.save_screenshot("after_login_submit.png")

        # Identity + SMS –æ—Ç–ª–∞–¥–∫–∞
        try_confirm_identity()
        try_sms_verification()

        logger.info("üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as ex:
        logger.error(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {ex}")
        driver.save_screenshot("fatal_error.png")
    finally:
        driver.quit()
        logger.info("üîí –î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç.")

if __name__ == '__main__':
    main()
