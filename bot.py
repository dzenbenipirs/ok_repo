import os
import time
import re
import requests
import logging
import sys
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException

# –ß—Ç–µ–Ω–∏–µ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
EMAIL = os.environ.get("OK_EMAIL")
PASSWORD = os.environ.get("OK_PASSWORD")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_USER_ID = os.environ.get("TELEGRAM_USER_ID")  # —Ç–µ–ø–µ—Ä—å –∏–º–µ–Ω–Ω–æ USER_ID

if not all([EMAIL, PASSWORD, TELEGRAM_TOKEN, TELEGRAM_USER_ID]):
    print("‚ùå –ó–∞–¥–∞–π—Ç–µ OK_EMAIL, OK_PASSWORD, TELEGRAM_BOT_TOKEN –∏ TELEGRAM_USER_ID.")
    sys.exit(1)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ Telegram
class TelegramHandler(logging.Handler):
    def __init__(self, token, chat_id):
        super().__init__()
        self.api_url = f"https://api.telegram.org/bot{token}/sendMessage"
        self.chat_id = chat_id

    def emit(self, record):
        try:
            requests.post(self.api_url, data={
                "chat_id": self.chat_id,
                "text": self.format(record)
            })
        except Exception:
            pass

logger = logging.getLogger("okru_auth")
logger.setLevel(logging.INFO)
fmt = logging.Formatter("%(asctime)s | %(levelname)s | %(message)s")
# –ö–æ–Ω—Å–æ–ª—å
ch = logging.StreamHandler(sys.stdout)
ch.setFormatter(fmt)
logger.addHandler(ch)
# Telegram
tg = TelegramHandler(TELEGRAM_TOKEN, TELEGRAM_USER_ID)
tg.setFormatter(fmt)
logger.addHandler(tg)

# –ó–∞–ø—É—Å–∫ Chrome
opts = uc.ChromeOptions()
opts.add_argument('--headless=new')
opts.add_argument('--no-sandbox')
opts.add_argument('--disable-dev-shm-usage')
opts.add_argument('--disable-gpu')
opts.add_argument('--window-size=1920,1080')
driver = uc.Chrome(options=opts)
wait = WebDriverWait(driver, 20)

# 1) ¬´It's you¬ª
def try_confirm_identity():
    try:
        btn = wait.until(EC.element_to_be_clickable((By.XPATH,
            "//input[@value='Yes, confirm']"
            " | //button[contains(text(),'Yes, confirm')]"
            " | //button[contains(text(),'–î–∞, —ç—Ç–æ —è')]"
        )))
        btn.click()
        logger.info("üîì 'It's you' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
        driver.save_screenshot("after_confirm_identity.png")
        time.sleep(1)
    except Exception:
        logger.info("‚ÑπÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ 'It's you' –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∞.")

# 2) –ü–æ–ª—É—á–µ–Ω–∏–µ SMS-–∫–æ–¥–∞
# --- –ü–æ–ª—É—á–µ–Ω–∏–µ SMS-–∫–æ–¥–∞ –∏–∑ Telegram (—Å –ª–æ–≥–æ–º getUpdates) ---
def retrieve_sms_code(poll_interval=5):
    api_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    last_update = None
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ SMS-–∫–æ–¥–∞ –≤ Telegram... –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –≤ —ç—Ç–æ—Ç —á–∞—Ç.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã
    try:
        init = requests.get(api_url, params={'timeout': 0}).json()
        if init.get('ok'):
            ids = [u['update_id'] for u in init.get('result', [])]
            if ids:
                last_update = max(ids) + 1
    except Exception:
        last_update = None

    while True:
        try:
            resp = requests.get(api_url, params={'timeout': 0, 'offset': last_update}).json()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
            time.sleep(poll_interval)
            continue

        # –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç
        logger.info(f"üîé getUpdates –≤–µ—Ä–Ω—É–ª: {resp}")

        if not resp.get('ok'):
            time.sleep(poll_interval)
            continue

        for upd in resp.get('result', []):
            last_update = upd['update_id'] + 1
            msg = upd.get('message') or upd.get('edited_message')
            if not msg or str(msg['chat']['id']) != TELEGRAM_USER_ID:
                continue
            text = msg.get('text', '')
            match = re.search(r"(\d{4,6})", text)
            if match:
                code = match.group(1)
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {text!r} ‚Üí {code}")
                return code

        time.sleep(poll_interval)


# 3) –ó–∞–ø—Ä–æ—Å –∏ –≤–≤–æ–¥ SMS-–∫–æ–¥–∞
def try_sms_verification():
    try:
        # 3.1) –ù–∞–∂–∏–º–∞–µ–º ¬´Get code¬ª
        driver.save_screenshot("sms_verification_page.png")
        btn = wait.until(EC.element_to_be_clickable((By.XPATH,
            "//input[@type='submit' and @value='Get code']"
        )))
        btn.click()
        logger.info("üì≤ 'Get code' –Ω–∞–∂–∞—Ç, SMS-–∫–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω.")
        driver.save_screenshot("sms_requested.png")

        # 3.2) –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞‚Ä¶
        logger.info("üîÑ –û–∂–∏–¥–∞—é —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ SMS-–∫–æ–¥–∞‚Ä¶")
        while True:
            try:
                form = driver.find_element(By.XPATH,
                    "//div[@class='ext-registration_cnt']//form[contains(@action,'AnonymUnblockVerifyPhoneCodeOldPhone')]"
                )
                inp = form.find_element(By.ID, "smsCode")
                if inp.is_displayed():
                    logger.info("üëÄ –ü–æ–ª–µ –¥–ª—è –∫–æ–¥–∞ –ø–æ—è–≤–∏–ª–æ—Å—å.")
                    driver.save_screenshot("sms_input_field.png")
                    break
            except NoSuchElementException:
                pass
            time.sleep(1)

        # 3.3) –î–æ–∂–∏–¥–∞–µ–º—Å—è –∫–æ–¥–∞ –∏–∑ Telegram
        code = retrieve_sms_code()
        inp.clear()
        inp.send_keys(code)
        logger.info(f"‚úçÔ∏è –ö–æ–¥ –≤–≤–µ–¥—ë–Ω: {code}")
        driver.save_screenshot("sms_code_entered.png")

        # 3.4) –ù–∞–∂–∏–º–∞–µ–º ¬´Next¬ª
        next_btn = form.find_element(By.XPATH,
            ".//input[@type='submit' and @value='Next']"
        )
        next_btn.click()
        logger.info("‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –Ω–∞–∂–∞–ª 'Next'.")
        driver.save_screenshot("sms_confirmed.png")

    except Exception as e:
        logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π
def main():
    try:
        logger.info("üöÄ –û—Ç–∫—Ä—ã–≤–∞—é OK.RU...")
        driver.get("https://ok.ru/")
        driver.save_screenshot("login_page.png")

        # –í–≤–æ–¥ —É—á—ë—Ç–Ω—ã—Ö
        wait.until(EC.presence_of_element_located((By.NAME,'st.email'))).send_keys(EMAIL)
        driver.find_element(By.NAME,'st.password').send_keys(PASSWORD)
        driver.save_screenshot("credentials_entered.png")

        # –í—Ö–æ–¥–∏–º
        logger.info("üîë –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞...")
        driver.find_element(By.XPATH,"//input[@type='submit']").click()
        time.sleep(2)
        driver.save_screenshot("after_login_submit.png")

        # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å identity + SMS
        try_confirm_identity()
        try_sms_verification()
        logger.info("üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    except Exception as ex:
        logger.error(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {ex}")
        driver.save_screenshot("fatal_error.png")
    finally:
        driver.quit()
        logger.info("üîí –î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç.")

if __name__ == '__main__':
    main()
